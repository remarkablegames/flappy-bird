{"version":3,"sources":["assets/jump.wav","assets/bird.png","assets/pipe.png","constants/index.js","scenes/Boot.js","sprites/Bird.js","sprites/Pipe.js","scenes/Main.js","index.js","scenes/Title.js"],"names":["SCENE_MAIN","SCENE_TITLE","SOUND_JUMP","TEXTURE_BIRD","TEXTURE_PIPE","Boot","Phaser","Scene","key","this","load","audio","require","default","image","scene","start","Bird","GameObjects","Sprite","x","y","texture","frame","add","existing","physics","world","enable","jumpSound","sound","spacebar","input","keyboard","addKey","Input","Keyboard","KeyCodes","SPACE","lastJumped","body","setVelocityY","tweens","targets","angle","duration","play","time","active","activePointer","isDown","buttons","jump","Pipe","Physics","Arcade","setOrigin","enableBody","setAllowGravity","setVelocityX","width","disableBody","Main","bird","setDepth","pipes","group","classType","runChildUpdate","overlap","hitPipe","addPipesEvent","addEvent","callback","addPipes","callbackScope","delay","loop","score","scoreText","text","font","fill","holeIndex","Math","floor","random","index","get","init","setActive","remove","delta","update","config","backgroundColor","height","title","url","process","version","cameras","main","centerX","centerY","setInteractive","on","arcade","gravity","debug","disableContextMenu","Game"],"mappings":"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","file":"static/js/main.c46e3cb6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/jump.68b35912.wav\";","export default __webpack_public_path__ + \"static/media/bird.24ed8f03.png\";","export default __webpack_public_path__ + \"static/media/pipe.dff20c4c.png\";","export const SCENE_BOOT = 'BOOT';\nexport const SCENE_MAIN = 'MAIN';\nexport const SCENE_TITLE = 'TITLE';\n\nexport const SOUND_JUMP = 'JUMP';\n\nexport const TEXTURE_BIRD = 'BIRD';\nexport const TEXTURE_PIPE = 'PIPE';\n","import {\n  SCENE_BOOT,\n  SCENE_TITLE,\n  SOUND_JUMP,\n  TEXTURE_BIRD,\n  TEXTURE_PIPE,\n} from '../constants';\n\nclass Boot extends Phaser.Scene {\n  constructor() {\n    super({ key: SCENE_BOOT });\n  }\n\n  preload() {\n    this.load.audio(SOUND_JUMP, require('../assets/jump.wav').default);\n    this.load.image(TEXTURE_BIRD, require('../assets/bird.png').default);\n    this.load.image(TEXTURE_PIPE, require('../assets/pipe.png').default);\n  }\n\n  create() {\n    this.scene.start(SCENE_TITLE);\n  }\n}\n\nexport default Boot;\n","import { SOUND_JUMP, TEXTURE_BIRD } from '../constants';\n\nconst JUMP_DELAY = 200;\n\nclass Bird extends Phaser.GameObjects.Sprite {\n  constructor(scene, x, y, texture, frame) {\n    super(scene, x, y, TEXTURE_BIRD);\n\n    // Add the sprite to the scene.\n    scene.add.existing(this);\n\n    // Enable physics for the sprite.\n    scene.physics.world.enable(this);\n\n    // The jump sound.\n    this.jumpSound = scene.sound.add(SOUND_JUMP);\n\n    // Add key object for spacebar.\n    this.spacebar = scene.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.SPACE\n    );\n\n    this.lastJumped = 0;\n  }\n\n  jump() {\n    this.body.setVelocityY(-350);\n    this.scene.tweens.add({\n      targets: this,\n      angle: -20,\n      duration: 100,\n    });\n    this.jumpSound.play();\n  }\n\n  update(time) {\n    // Do nothing if dead. (The sprite should be falling off the screen.)\n    if (!this.active) {\n      return;\n    }\n\n    // Rotate downwards over time to simulate falling.\n    if (this.angle < 20) {\n      this.angle++;\n    }\n\n    const { activePointer } = this.scene.input;\n\n    // Jump and rotate upwards when spacebar is pressed or left pointer is down.\n    if (\n      time > this.lastJumped &&\n      (this.spacebar.isDown ||\n        (activePointer.isDown && activePointer.buttons === 1))\n    ) {\n      this.jump();\n      this.lastJumped = time + JUMP_DELAY;\n    }\n  }\n}\n\nexport default Bird;\n","import { TEXTURE_PIPE } from '../constants';\n\nclass Pipe extends Phaser.Physics.Arcade.Sprite {\n  constructor(scene, x, y, texture, frame) {\n    super(scene, x, y, TEXTURE_PIPE);\n\n    // Reset drawing position of image to the top-left.\n    this.setOrigin(0);\n  }\n\n  init() {\n    // Make pipe active and visible.\n    this.enableBody();\n\n    // Stop pipe from falling down.\n    this.body.setAllowGravity(false);\n\n    // Move pipe to the left.\n    this.body.setVelocityX(-200);\n  }\n\n  update() {\n    // Make pipe inactive and invisible if it goes beyond world bounds.\n    if (this.x + this.width < 0) {\n      this.disableBody();\n    }\n  }\n}\n\nexport default Pipe;\n","import { Bird, Pipe } from '../sprites';\nimport { SCENE_MAIN, SCENE_TITLE } from '../constants';\n\nclass Main extends Phaser.Scene {\n  constructor() {\n    super({ key: SCENE_MAIN });\n  }\n\n  create() {\n    // Add bird sprite and bring it to the front.\n    this.bird = new Bird(this, 100, 245);\n    this.bird.setDepth(1);\n\n    // Add pipes group.\n    this.pipes = this.physics.add.group({\n      classType: Pipe,\n      runChildUpdate: true,\n    });\n\n    // Check for overlap between bird and pipe.\n    this.physics.add.overlap(this.bird, this.pipes, this.hitPipe, null, this);\n\n    // Generate row of pipes in intervals.\n    this.addPipesEvent = this.time.addEvent({\n      callback: this.addPipes,\n      callbackScope: this,\n      delay: 1500,\n      loop: true,\n    });\n\n    // The score.\n    this.score = 0;\n\n    // Add score text and bring it to the front.\n    this.scoreText = this.add.text(20, 20, this.score, {\n      font: '32px Arial',\n      fill: '#fff',\n    });\n    this.scoreText.setDepth(1);\n  }\n\n  addPipes() {\n    // Pick a number between 1 and 5 that will be the hole index.\n    const holeIndex = Math.floor(Math.random() * 5) + 1;\n\n    // Add 6 pipes with a hole at the index plus one.\n    for (let index = 0; index < 8; index++) {\n      if (index === holeIndex || index === holeIndex + 1) {\n        continue;\n      }\n      this.pipes.get(400, index * 60 + 10).init();\n    }\n\n    // Increase the score by 1.\n    this.scoreText.text = this.score++;\n  }\n\n  hitPipe() {\n    const { bird } = this;\n\n    // Do nothing if bird is dead. It means the bird is falling off the screen.\n    if (!bird.active) {\n      return;\n    }\n\n    // Kill the bird but keep it visible.\n    bird.setActive(false);\n\n    // Stop movement of all pipes.\n    this.pipes.setVelocityX(0);\n\n    // Prevent new pipes from being generated.\n    this.addPipesEvent.remove();\n  }\n\n  update(time, delta) {\n    const { bird } = this;\n\n    // Restart scene if bird is out of bounds.\n    if (bird.y < 0 || bird.y > 490) {\n      this.scene.start(SCENE_TITLE);\n    }\n\n    bird.update(time);\n  }\n}\n\nexport default Main;\n","import './index.css';\nimport { Boot, Title, Main } from './scenes';\n\nconst config = {\n  backgroundColor: '#71c5cf',\n  width: 400,\n  height: 490,\n  title: 'Flappy Bird',\n  url: process.env.WEB_APP_HOMEPAGE,\n  version: process.env.WEB_APP_VERSION,\n  scene: [Boot, Title, Main],\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 1000 },\n      debug: process.env.NODE_ENV === 'development',\n    },\n  },\n  disableContextMenu: process.env.NODE_ENV !== 'development',\n};\n\nnew Phaser.Game(config);\n","import { SCENE_MAIN, SCENE_TITLE } from '../constants';\n\nclass Title extends Phaser.Scene {\n  constructor() {\n    super({ key: SCENE_TITLE });\n  }\n\n  create() {\n    const { centerX, centerY } = this.cameras.main;\n\n    this.add\n      .text(centerX, centerY, 'PLAY', {\n        fill: 'white',\n        font: '48px Arial',\n      })\n      .setOrigin(0.5)\n      .setInteractive();\n\n    this.input.on('pointerdown', () => this.scene.start(SCENE_MAIN));\n  }\n}\n\nexport default Title;\n"],"sourceRoot":""}